{"version":3,"sources":["components/service/AuthService.js","components/auth/Signup.jsx","components/auth/Login.jsx","components/contents/Home.jsx","components/navbar/Navbar.jsx","components/userPrinter/UserPrinter.jsx","components/auth/SignupPro.jsx","App.js","serviceWorker.js","index.js"],"names":["AuthService","_this","this","Object","classCallCheck","signup","username","email","password","service","post","then","response","data","signupPro","printerName","login","loggedin","get","logout","editprofile","imageProfile","put","axios","create","baseURL","withCredentials","Signup","props","possibleConstructorReturn","getPrototypeOf","call","handlerSubmit","event","preventDefault","state","setState","redirectLogin","getUser","user","catch","error","handlerChange","_event$target","target","name","value","objectSpread","defineProperty","_this2","react_default","a","createElement","Redirect","to","className","onSubmit","id","type","onChange","e","Link","Component","Login","redirect","Home","class","Navbar","handleLogout","loggedInUser","nextProps","onClick","UserPrinter","SignupPro","App","userObj","err","_this3","fetchUser","components_navbar_Navbar","userInSession","components_contents_Home","Switch","Route","exact","path","render","components_auth_SignupPro","components_auth_Signup","components_auth_Login","components_userPrinter_UserPrinter","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1a61e201.chunk.js","sourcesContent":["import axios from 'axios';\n\nclass AuthService {\n\tconstructor() {\n\t\tthis.service = axios.create({\n\t\t\tbaseURL: 'http://localhost:5000/auth',\n\t\t\twithCredentials: true\n\t\t});\n\t}\n\n\tsignup = (username, email, password) => {\n\t\treturn this.service.post('/signup/us', { username, email, password }).then((response) => response.data);\n\t};\n\n\tsignupPro = (printerName, email, password) => {\n\t\treturn this.service.post('/signup/pr', { printerName, email, password }).then((response) => response.data);\n\t};\n\n\tlogin = (email, password) => {\n\t\treturn this.service.post('/login', { email, password }).then((response) => response.data);\n\t};\n\n\tloggedin = () => {\n\t\treturn this.service.get('/currentUser').then((response) => response.data);\n\t};\n\n\tlogout = () => {\n\t\treturn this.service.get('/logout').then((response) => response.data);\n\t};\n\n\teditprofile = (username, email, password, imageProfile) => {\n\t\treturn this.service\n\t\t\t.put('/editprofile', { username, email, password, imageProfile })\n\t\t\t.then((response) => response.data);\n\t};\n}\n\nexport default AuthService;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './Signup.css';\nimport AuthService from '../service/AuthService';\nimport { Redirect } from 'react-router-dom';\n\nclass Signup extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { username: '', email: '', password: '', redirectLogin: false };\n\t\tthis.service = new AuthService();\n\t}\n\n\thandlerSubmit = (event) => {\n\t\tevent.preventDefault();\n\t\tconst username = this.state.username;\n\t\tconst email = this.state.email;\n\t\tconst password = this.state.password;\n\n\t\t//aquí llamamos al endpoint /signup de nuestra API Rest usando nuestro AuthService\n\t\tthis.service\n\t\t\t.signup(username, email, password)\n\t\t\t.then((response) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tusername: '',\n\t\t\t\t\temail: '',\n\t\t\t\t\tpassword: '',\n\t\t\t\t\tredirectLogin: true\n\t\t\t\t});\n\n\t\t\t\t//aquí elevamos el nuevo usuario una vez creado a App usando getUser via props\n\t\t\t\t//por tanto, informamos a App de que el nuevo usuario ha sido creado, provocando un re-render\n\t\t\t\t//y mostrando la parte de contenidos. Mira la función getUser de App para más info (date cuenta de que establece el state de App)\n\t\t\t\tthis.props.getUser(response.user);\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tusername: username,\n\t\t\t\t\temail: email,\n\t\t\t\t\tpassword: password,\n\n\t\t\t\t\terror: true\n\t\t\t\t});\n\t\t\t});\n\t};\n\n\thandlerChange = (event) => {\n\t\tconst { name, value } = event.target;\n\t\tthis.setState({ ...this.state, [name]: value });\n\t};\n\n\trender() {\n\t\tif (this.state && this.state.redirectLogin) {\n\t\t\treturn <Redirect to=\"/login\" />;\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"container-signup\">\n\t\t\t\t<div className=\"allform\">\n\t\t\t\t\t<h2>Sign Up</h2>\n\t\t\t\t\t<form className=\"signup\" onSubmit={this.handlerSubmit}>\n\t\t\t\t\t\t<label>Username</label>\n\t\t\t\t\t\t<input id=\"username\" type=\"text\" name=\"username\" onChange={(e) => this.handlerChange(e)} />\n\t\t\t\t\t\t<label>Email</label>\n\t\t\t\t\t\t<input id=\"email\" type=\"email\" name=\"email\" onChange={(e) => this.handlerChange(e)} />\n\t\t\t\t\t\t<label>Password</label>\n\t\t\t\t\t\t<input type=\"password\" id=\"password\" name=\"password\" onChange={(e) => this.handlerChange(e)} />\n\n\t\t\t\t\t\t<input type=\"submit\" value=\"Create the Account\" />\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t\t<p>\n\t\t\t\t\tAlready have account?\n\t\t\t\t\t<Link to={'/login'}> Login</Link>\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Signup;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './Login.css';\nimport AuthService from '../service/AuthService';\nimport { Redirect } from 'react-router-dom';\n\nclass Login extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { email: '', password: '', redirect: false };\n\t\tthis.service = new AuthService();\n\t}\n\n\thandlerSubmit = (event) => {\n\t\tevent.preventDefault();\n\t\tconst email = this.state.email;\n\t\tconst password = this.state.password;\n\n\t\tthis.service\n\t\t\t.login(email, password)\n\t\t\t.then((response) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\temail: email,\n\t\t\t\t\tpassword: password,\n\t\t\t\t\tredirect: true,\n\t\t\t\t\terror: false\n\t\t\t\t});\n\n\t\t\t\tthis.props.getUser(response);\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\temail: email,\n\t\t\t\t\tpassword: password,\n\t\t\t\t\tredirect: false,\n\t\t\t\t\terror: true\n\t\t\t\t});\n\t\t\t});\n\t};\n\n\thandlerChange = (event) => {\n\t\tconst { name, value } = event.target;\n\t\tthis.setState({ ...this.state, [name]: value });\n\t};\n\n\trender() {\n\t\tif (this.state.redirect) {\n\t\t\treturn <Redirect to=\"/home\" />;\n\t\t}\n\t\treturn (\n\t\t\t<div className=\"container-login\">\n\t\t\t\t<h2>Login</h2>\n\t\t\t\t<form className=\"signup\" onSubmit={this.handlerSubmit}>\n\t\t\t\t\t<label>Email</label>\n\t\t\t\t\t<input id=\"email\" type=\"email\" name=\"email\" onChange={(e) => this.handlerChange(e)} />\n\n\t\t\t\t\t<label>Password</label>\n\t\t\t\t\t<input type=\"password\" id=\"password\" name=\"password\" onChange={(e) => this.handlerChange(e)} />\n\n\t\t\t\t\t<input type=\"submit\" value=\"Log in\" />\n\t\t\t\t</form>\n\t\t\t\t<h1>{this.state.error ? 'Error' : ''}</h1>\n\t\t\t\t<p>\n\t\t\t\t\tDon't have account?\n\t\t\t\t\t<Link to={'/signup'}> Signup</Link>\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Login;\n","import React, { Component } from 'react';\nimport './Home.css';\n\n//clase componente que renderiza los contenidos genéricos\n//usando rendering condicional y el componente Switch que ya conocéis podéis mostrar los contenidos oportunos que queráis\nclass Home extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div class=\"home-user\">\n\t\t\t\t<h3>Subir fotos</h3>\n\t\t\t\t<h3>Invitar a usuarios</h3>\n\t\t\t\t<div class=\"fotoprofile\">Aquí va la foto de perfil</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport AuthService from '../service/AuthService';\nimport './Navbar.css';\n\nclass Navbar extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { loggedInUser: null };\n\t\tthis.service = new AuthService();\n\t}\n\n\tcomponentWillReceiveProps(nextProps) {\n\t\tthis.setState({ ...this.state, loggedInUser: nextProps['userInSession'] });\n\t}\n\n\thandleLogout = (e) => {\n\t\tthis.props.logout();\n\t};\n\n\trender() {\n\t\tif (this.state.loggedInUser) {\n\t\t\treturn (\n\t\t\t\t<nav className=\"navbar\">\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>{this.state.loggedInUser.username}</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a onClick={this.handleLogout}>Logout</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link to=\"/profile/:_id\">Edit Profile</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</nav>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<nav className=\"navbar\">\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/signup/up\">Signup</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<Link to=\"/login\">Login</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport default Navbar;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './UserPrinter.css';\nimport AuthService from '../service/AuthService';\n// import { Redirect } from 'react-router-dom';\n\nclass UserPrinter extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { username: '', email: '', password: '', redirectLogin: false };\n\t\tthis.service = new AuthService();\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"printerUser\">\n\t\t\t\t<Link to={'/signup/pr'}> Are you a Professional Printer?</Link>\n\t\t\t\t<p>o</p>\n\t\t\t\t<Link to={'/signup/us'}> User?</Link>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default UserPrinter;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './SignupPro.css';\nimport AuthService from '../service/AuthService';\nimport { Redirect } from 'react-router-dom';\n\nclass SignupPro extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { printerName: '', email: '', password: '', redirectLogin: false };\n\t\tthis.service = new AuthService();\n\t}\n\n\thandlerSubmit = (event) => {\n\t\tevent.preventDefault();\n\t\tconst printerName = this.state.printerName;\n\t\tconst email = this.state.email;\n\t\tconst password = this.state.password;\n\n\t\t//aquí llamamos al endpoint /signup de nuestra API Rest usando nuestro AuthService\n\t\tthis.service\n\t\t\t.signupPro(printerName, email, password)\n\t\t\t.then((response) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tprinterName: '',\n\t\t\t\t\temail: '',\n\t\t\t\t\tpassword: '',\n\t\t\t\t\tredirectLogin: true\n\t\t\t\t});\n\n\t\t\t\t//aquí elevamos el nuevo usuario una vez creado a App usando getUser via props\n\t\t\t\t//por tanto, informamos a App de que el nuevo usuario ha sido creado, provocando un re-render\n\t\t\t\t//y mostrando la parte de contenidos. Mira la función getUser de App para más info (date cuenta de que establece el state de App)\n\t\t\t\tthis.props.getUser(response.user);\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tprinterName: printerName,\n\t\t\t\t\temail: email,\n\t\t\t\t\tpassword: password,\n\n\t\t\t\t\terror: true\n\t\t\t\t});\n\t\t\t});\n\t};\n\n\thandlerChange = (event) => {\n\t\tconst { name, value } = event.target;\n\t\tthis.setState({ ...this.state, [name]: value });\n\t};\n\n\trender() {\n\t\tif (this.state && this.state.redirectLogin) {\n\t\t\treturn <Redirect to=\"/login\" />;\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"container-signupPro\">\n\t\t\t\t<div className=\"allform\">\n\t\t\t\t\t<h2>Sign Up</h2>\n\t\t\t\t\t<form className=\"signup\" onSubmit={this.handlerSubmit}>\n\t\t\t\t\t\t<label>Printer Name</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tid=\"printerName\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tname=\"printerName\"\n\t\t\t\t\t\t\tonChange={(e) => this.handlerChange(e)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<label>Email</label>\n\t\t\t\t\t\t<input id=\"email\" type=\"email\" name=\"email\" onChange={(e) => this.handlerChange(e)} />\n\n\t\t\t\t\t\t<label>Password</label>\n\t\t\t\t\t\t<input type=\"password\" id=\"password\" name=\"password\" onChange={(e) => this.handlerChange(e)} />\n\n\t\t\t\t\t\t<input type=\"submit\" value=\"Create the Account\" />\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t\t<p>\n\t\t\t\t\tAlready have account?\n\t\t\t\t\t<Link to={'/login'}> Login</Link>\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default SignupPro;\n","import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Signup from './components/auth/Signup';\nimport Login from './components/auth/Login';\nimport AuthService from './components/service/AuthService';\nimport Home from './components/contents/Home';\nimport Navbar from './components/navbar/Navbar';\nimport UserPrinter from './components/userPrinter/UserPrinter';\n\nimport './App.css';\nimport SignupPro from './components/auth/SignupPro';\n\n//App es la aplicación base, que se sirve del servicio AuthService para conectar con la bbdd\nclass App extends Component {\n\t//en el tiempo de construcción de la aplicación, creamos una instancia del authservice\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t//arrancamos el estado con un valor de loggedInUser con nada (luego lo vamos a reemplazar con el valor real)\n\t\tthis.state = { loggedInUser: null };\n\t\tthis.service = new AuthService();\n\t}\n\n\tgetUser = (userObj) => {\n\t\tthis.setState({\n\t\t\tloggedInUser: userObj\n\t\t});\n\t};\n\n\tlogout = () => {\n\t\tthis.service.logout().then(() => {\n\t\t\tthis.setState({ loggedInUser: null });\n\t\t});\n\t};\n\n\t//este método vuelca la información del usuario y lo guarda en el state de app que siempre puedes revisitar\n\tfetchUser() {\n\t\tif (this.state.loggedInUser === null) {\n\t\t\t//utilizamos el método loggedin para cualquier momento que deseemos obtener la información del usuario quede guardada en el state de app\n\t\t\tthis.service\n\t\t\t\t.loggedin()\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tloggedInUser: response\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tloggedInUser: false\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t}\n\t}\n\n\trender() {\n\t\t//al hacer render, almacenamos la información del usuario existente en el state de app\n\t\tthis.fetchUser();\n\n\t\t//aqui hacemos rendering condicional dependiendo de si tenemos un usuario logeado o no\n\t\tif (this.state.loggedInUser) {\n\t\t\t//en este caso mostramos los contenidos ya que hay usuario\n\t\t\treturn (\n\t\t\t\t<div className=\"padre\">\n\t\t\t\t\t<header className=\"header\">\n\t\t\t\t\t\t<Navbar userInSession={this.state.loggedInUser} logout={this.logout} />\n\t\t\t\t\t\t{/* aqui simplemente se muestra un lorem ipsum genérico para que veáis contenidos que solo se muestran a usuarios logeados */}\n\t\t\t\t\t\t<Home />\n\t\t\t\t\t</header>\n\t\t\t\t</div>\n\t\t\t);\n\t\t} else {\n\t\t\t//si no estás logeado, mostrar opcionalmente o login o signup\n\t\t\treturn (\n\t\t\t\t<div className=\"padre\">\n\t\t\t\t\t<header className=\"header\">\n\t\t\t\t\t\t<Navbar userInSession={this.state.loggedInUser} logout={this.logout} />\n\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route exact path=\"/signup/pr\" render={() => <SignupPro getUser={this.getUser} />} />\n\t\t\t\t\t\t\t<Route exact path=\"/signup/us\" render={() => <Signup getUser={this.getUser} />} />\n\t\t\t\t\t\t\t<Route exact path=\"/login\" render={() => <Login getUser={this.getUser} />} />\n\t\t\t\t\t\t\t<Route exact path=\"/signup/up\" render={() => <UserPrinter />} />\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</header>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n\t<BrowserRouter>\n\t\t<App />\n\t</BrowserRouter>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}